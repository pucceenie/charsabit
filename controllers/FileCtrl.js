var FileCtrl = function () {
	this.mongoose = require('mongoose');

	this.dbConn = require('../models/db');

	this.fs = require('fs');

	this.Grid = require('gridfs-stream');
	this.Grid.mongo = this.mongoose.mongo;
	this.gfs = this.Grid(this.dbConn.db);
}

//write a file to fs.files collection
FileCtrl.prototype.writeFile = function (path, filename, callback) {
	var writestream = this.gfs.createWriteStream({
		filename: filename
	});

	var stream = this.fs.createReadStream(path);
	stream.on('error', function (err) {
		console.log('Caught: ', err);
	});
	stream.pipe(writestream);

	writestream.on('close', function (file) {
		return callback(file);
	});
}

//read a file from fs.files collection, by filename or id
FileCtrl.prototype.readFile = function (filenameorid, callback) {
	//read file by filename
	if (filenameorid.match(/\.(jpg|png|gif)\b/)) {
		var readstream = this.gfs.createReadStream({
			filename: filenameorid
		});
		return callback(readstream);
	} else {
		//read file by _id
		var readstream = this.gfs.createReadStream({
			_id: filenameorid
		});
		return callback(readstream);
	}
}

//check a file exists in fs.files collection, by filename or id
FileCtrl.prototype.fileExists = function (filenameorid, callback) {
	if (filenameorid.match(/\.(jpg|png|gif)\b/)) {
		var options = { filename: filenameorid };
	} else {
		var options = { _id: filenameorid };
	}
	
	this.gfs.exist(options, function (err, found) {
		if (err) console.log(err);
		(found)
			? callback(true)
			: callback(false);
	})
}

//delete a file from fs.files collection, by filename or id
FileCtrl.prototype.deleteFile = function (filenameorid) {
	if (filenameorid.match(/\.(jpg|png|gif)\b/)) {
		this.gfs.remove({
			filename: filenameorid
		}, function (err) {
			if (err) return console.log(err);
			console.log('Delete file success!!');
		})
	} else {
		this.gfs.remove({
			_id: filenameorid
		}, function (err) {
			if (err) return console.log(err);
			console.log('Delete file success!!');
		})
	}
}

//get file _id by filename
FileCtrl.prototype.getFileId = function (filename, callback) {
	this.gfs.findOne({ filename: filename }, function (err, file) {
		return callback(file._id);
	})
}

//convert 64base to buffer
FileCtrl.prototype.convert64BasetoBuffer = function (img64base, fileName, callback) {
	//string generated by canvas.toDataURL()
	var img = img64base;

	//strip off the data: url prefix to get just the base64-encoded bytes
	var data = img.replace(/^data:image\/\w+;base64,/, "");
	var buf = new Buffer(data, 'base64');
	fileName = this.fs.writeFile(fileName, buf);
	return callback(fileName);
}

module.exports = FileCtrl;